{"version":3,"sources":["js/main.js"],"names":["API_KEY","ENDPOINT","resultDisplay","el","data","price","date","symbol","querySelector","innerHTML","Number","toFixed","toUpperCase","includes","fetchTickerData","evt","preventDefault","target","elements","value","fetch","then","response","json","Error","document","console","log","catch","err","alert","addEventListener"],"mappings":";AAAA,aAGA,IAAMA,EAAU,mBAGVC,EAAW,8CAQXC,EAAgB,SAACC,EAAIC,GAKrBA,IAAAA,EAAAA,EAAK,gBAHMC,EAAb,EAAA,aAC0BC,EAA1B,EAAA,0BACcC,EAAd,EAAA,cAEFJ,EAAGK,cAAc,UAAUC,UAAgBC,IAAAA,OAAAA,OAAOL,GAAOM,QAAQ,IACjER,EAAGK,cAAc,WAAWC,UAAYF,EAAOK,cAC/CT,EAAGK,cAAc,SAASC,UAAeH,GAAAA,OAAAA,EAAQA,KAAAA,OAAAA,EAAKO,SAAS,KAAOP,EAAO,KAQzEQ,EAAkB,SAAAC,GACtBA,EAAIC,iBAEET,IAAAA,EAASQ,EAAIE,OAAOC,SAAX,OAA8BC,MAC7CC,MAASnB,GAAAA,OAAAA,EAA+BM,wBAAAA,OAAAA,EAAiBP,YAAAA,OAAAA,IAAWqB,KAAK,SAAAC,GAChEA,OAAAA,EAASC,SACfF,KAAK,SAAAjB,GAEFA,GAAAA,EAAK,iBAED,MAAA,IAAIoB,MAAV,mDAGFtB,EAAcuB,SAASjB,cAAc,kBAAmBJ,GACxDsB,QAAQC,IAAIvB,KACXwB,MAAM,SAAAC,GAEPC,MAA6BD,uBAAAA,OAAAA,OAKjCJ,SAASjB,cAAc,eAAeuB,iBAAiB,SAAUjB","file":"main.4c2b17dd.js","sourceRoot":"..","sourcesContent":["\"use strict\";\r\n\r\n/** API key for signing the request */\r\nconst API_KEY = 'D600F8I0CUP4QEX2';\r\n/** Alpha Vantage REST endpoint */\r\n\r\nconst ENDPOINT = 'https://www.alphavantage.co/query?function=';\r\n/**\r\n * Display the current price and other information for a stock.\r\n * @param {HTMLElement} el DOM element parent for the display of the data. Must\r\n * contain a .symbol, .price, and .date elements.\r\n * @param {Object} data The returned stock symbol data\r\n */\r\n\r\nconst resultDisplay = (el, data) => {\r\n  let {\r\n    '05. price': price,\r\n    '07. latest trading day': date,\r\n    '01. symbol': symbol\r\n  } = data['Global Quote'];\r\n  el.querySelector('.price').innerHTML = `$${Number(price).toFixed(2)}`;\r\n  el.querySelector('.symbol').innerHTML = symbol.toUpperCase();\r\n  el.querySelector('.date').innerHTML = `${date} ${date.includes(':') ? date : ''}`;\r\n};\r\n/**\r\n * Handle symbol form submit to fetch the desired symbol information.\r\n * @param {Event} evt Event object for this listener function\r\n */\r\n\r\n\r\nconst fetchTickerData = evt => {\r\n  evt.preventDefault(); // get the symbol\r\n\r\n  const symbol = evt.target.elements['symbol'].value;\r\n  fetch(`${ENDPOINT}GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`).then(response => {\r\n    return response.json();\r\n  }).then(data => {\r\n    // log and export all data\r\n    if (data['Error Message']) {\r\n      // BONUS\r\n      throw new Error(`There was an error. Please enter a valid symbol`);\r\n    }\r\n\r\n    resultDisplay(document.querySelector('.stock-display'), data);\r\n    console.log(data);\r\n  }).catch(err => {\r\n    // BONUS\r\n    alert(`There was an error: ${err}`);\r\n  });\r\n}; // add the submit listener\r\n\r\n\r\ndocument.querySelector('.frm.symbol').addEventListener('submit', fetchTickerData);"]}